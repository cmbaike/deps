# GitLab CI/CD Pipeline for Flask API and React Frontend Deployment with Nginx
# This pipeline deploys to a Windows server without internet access using PowerShell

variables:
  WINDOWS_SERVER: "server-hostname"
  DEPLOY_PATH: "C:\\app_deployment"
  PYTHON_PATH: "C:\\Python39\\python.exe"
  VENV_NAME: "venv"
  FLASK_PORT: "5000"
  NGINX_PORT: "80" 
  NGINX_PATH: "C:\\nginx"
  NGINX_CONFIG_PATH: "config/nginx.conf"
  # The following variables should be set in GitLab CI/CD settings as masked variables
  # WINDOWS_USERNAME: Windows server username
  # WINDOWS_PASSWORD: Windows server password

stages:
  - build
  - deploy
  - verify

# Job to prepare backend application
prepare_backend:
  stage: build
  script:
    # Create backend deployment package
    - mkdir -p backend_package
    - cp -r api/* backend_package/
    
    # Create or ensure requirements.txt exists
    - |
      if [ ! -f "backend_package/requirements.txt" ]; then
        echo "flask==2.0.1
        werkzeug==2.0.1
        flask-cors==3.0.10" > backend_package/requirements.txt
      fi
    
    # Create PowerShell script to start Flask app
    - |
      cat > backend_package/start_flask.ps1 << 'EOF'
      $ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
      Set-Location -Path $ScriptPath
      
      # Activate virtual environment
      & "$ScriptPath\${VENV_NAME}\Scripts\Activate.ps1"
      
      Write-Host "Starting Flask application on port ${FLASK_PORT}..."
      $env:FLASK_ENV = "production"
      $env:FLASK_APP = "app.py"
      
      # Start Flask in the background
      Start-Process -FilePath "${PYTHON_PATH}" -ArgumentList "-m flask run --host=0.0.0.0 --port=${FLASK_PORT}" -NoNewWindow
      Write-Host "Flask application started."
      EOF
    
    # Create PowerShell script for offline dependency installation
    - |
      cat > backend_package/setup_venv.ps1 << 'EOF'
      $ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
      Set-Location -Path $ScriptPath
      
      Write-Host "Setting up virtual environment..."
      if (-not (Test-Path "${VENV_NAME}")) {
          Write-Host "Creating virtual environment..."
          & "${PYTHON_PATH}" -m venv ${VENV_NAME}
      }
      
      # Activate virtual environment
      & "$ScriptPath\${VENV_NAME}\Scripts\Activate.ps1"
      
      Write-Host "Installing dependencies from wheels directory (if available)..."
      if (Test-Path "wheels") {
          pip install --no-index --find-links=wheels -r requirements.txt
      } else {
          Write-Host "WARNING: No wheels directory found. Cannot install dependencies without internet."
          Write-Host "You need to provide pre-downloaded wheels for offline installation."
      }
      
      Write-Host "Setup complete."
      EOF
    
    # Create PowerShell script to stop Flask app
    - |
      cat > backend_package/stop_flask.ps1 << 'EOF'
      Write-Host "Stopping Flask application..."
      $processes = Get-NetTCPConnection -LocalPort ${FLASK_PORT} -ErrorAction SilentlyContinue | Select-Object -ExpandProperty OwningProcess
      
      foreach ($process in $processes) {
          Write-Host "Killing process ID: $process"
          Stop-Process -Id $process -Force
      }
      
      Write-Host "Flask application stopped."
      EOF
    
    # Create a zip file of the backend
    - apt-get update && apt-get install -y zip
    - cd backend_package && zip -r ../flask_backend.zip * && cd ..
  artifacts:
    paths:
      - flask_backend.zip
    expire_in: 1 day

# Job to build React frontend
build_frontend:
  stage: build
  script:
    # Navigate to frontend directory
    - cd frontend
    
    # Check for node_modules or extract from offline archive
    - |
      if [ ! -d "node_modules" ] && [ -f "node_modules_offline.zip" ]; then
        echo "Extracting pre-downloaded node_modules..."
        unzip -q node_modules_offline.zip
      fi
    
    # Build the React application
    - npm run build
    
    # Create a zip file of the frontend build
    - apt-get update && apt-get install -y zip
    - cd build && zip -r ../../react_frontend.zip * && cd ../..
  artifacts:
    paths:
      - react_frontend.zip
    expire_in: 1 day

# Job to prepare Nginx configuration
prepare_nginx:
  stage: build
  script:
    # Check if Nginx config exists
    - |
      if [ ! -f "${NGINX_CONFIG_PATH}" ]; then
        echo "Error: Nginx configuration file not found at ${NGINX_CONFIG_PATH}"
        exit 1
      fi
    
    # Copy Nginx config to working directory
    - cp ${NGINX_CONFIG_PATH} nginx.conf
    
    # Create PowerShell script to start/restart Nginx
    - |
      cat > start_nginx.ps1 << 'EOF'
      Write-Host "Stopping Nginx if running..."
      Stop-Process -Name "nginx" -Force -ErrorAction SilentlyContinue
      
      Write-Host "Copying Nginx configuration..."
      Copy-Item -Path "nginx.conf" -Destination "${NGINX_PATH}\conf\nginx.conf" -Force
      
      Write-Host "Starting Nginx..."
      Set-Location -Path "${NGINX_PATH}"
      Start-Process -FilePath "nginx.exe"
      Write-Host "Nginx started."
      EOF
    
    # Create a zip file with Nginx-related files
    - apt-get update && apt-get install -y zip
    - zip nginx_config.zip nginx.conf start_nginx.ps1
  artifacts:
    paths:
      - nginx_config.zip
    expire_in: 1 day

# Job to deploy application to Windows server
deploy_application:
  stage: deploy
  needs:
    - prepare_backend
    - build_frontend
    - prepare_nginx
  script:
    # Install dependencies for Windows deployment
    - apt-get update && apt-get install -y unzip curl p7zip-full
    
    # Download PSTools (for remote Windows command execution)
    - curl -L -o pstools.zip https://download.sysinternals.com/files/PSTools.zip
    - unzip pstools.zip -d pstools
    
    # Create deployment directories using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        if (-not (Test-Path '${DEPLOY_PATH}')) { New-Item -Path '${DEPLOY_PATH}' -ItemType Directory }
        if (-not (Test-Path '${DEPLOY_PATH}\backend')) { New-Item -Path '${DEPLOY_PATH}\backend' -ItemType Directory }
        if (-not (Test-Path '${DEPLOY_PATH}\frontend')) { New-Item -Path '${DEPLOY_PATH}\frontend' -ItemType Directory }
      "
    
    # Copy deployment files to server
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        robocopy \"$PWD\" \"${DEPLOY_PATH}\" flask_backend.zip react_frontend.zip nginx_config.zip /R:1 /W:1
      " || true  # Ignore robocopy exit code
    
    # Extract files on the server using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        Expand-Archive -Path '${DEPLOY_PATH}\flask_backend.zip' -DestinationPath '${DEPLOY_PATH}\backend' -Force
        Expand-Archive -Path '${DEPLOY_PATH}\react_frontend.zip' -DestinationPath '${DEPLOY_PATH}\frontend' -Force
        Expand-Archive -Path '${DEPLOY_PATH}\nginx_config.zip' -DestinationPath '${DEPLOY_PATH}' -Force
      "
    
    # Stop previous Flask instance using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        & \"${DEPLOY_PATH}\backend\stop_flask.ps1\"
      "
    
    # Setup Flask environment using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        & \"${DEPLOY_PATH}\backend\setup_venv.ps1\"
      "
    
    # Start Flask application using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        & \"${DEPLOY_PATH}\backend\start_flask.ps1\"
      "
    
    # Configure and start Nginx using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        & \"${DEPLOY_PATH}\start_nginx.ps1\"
      "

# Job to verify deployment
verify_deployment:
  stage: verify
  needs:
    - deploy_application
  script:
    # Install dependencies for Windows deployment
    - apt-get update && apt-get install -y curl p7zip-full
    
    # Download PSTools if not already available
    - |
      if [ ! -d "pstools" ]; then
        curl -L -o pstools.zip https://download.sysinternals.com/files/PSTools.zip
        unzip pstools.zip -d pstools
      fi
    
    # Verify Flask application is running using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        Get-NetTCPConnection -LocalPort ${FLASK_PORT} -ErrorAction SilentlyContinue
      "
    
    # Verify Nginx is running using PowerShell
    - |
      ./pstools/PsExec.exe \\${WINDOWS_SERVER} -u ${WINDOWS_USERNAME} -p ${WINDOWS_PASSWORD} powershell -Command "
        Get-NetTCPConnection -LocalPort ${NGINX_PORT} -ErrorAction SilentlyContinue
      "
    
    - echo "Application deployed successfully:"
    - echo "- Flask backend running on port ${FLASK_PORT}"
    - echo "- Nginx serving frontend on port ${NGINX_PORT}"
    - echo "- Access the application at http://${WINDOWS_SERVER}:${NGINX_PORT}"
  only:
    - main  # Only run verification on the main branch
    
# This pipeline will run on code changes to the main branch
only:
  - main